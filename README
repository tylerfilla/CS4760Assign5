Tyler Filla
CS 4760
Assignment 5

Preamble
========

This project simulates resource allocation and deadlock detection/resolution. It is similar in structure to my previous
projects. Simulated user processes are spawned as required and the deadlock detection algorithm from the notes is
periodically swept through the system to identify and break sticking points. The algorithm was modified to report all
the involved processes instead of simply telling if there are any processes involved in a deadlock. It cannot tell if
there are multiple cycles in the resource dependency graph, but this is irrelevant for the project.

No special policy is used to kill processes involved in deadlocks. Simply the first to be found is killed first.

Directory Structure
===================

Project Root
 |
 +-- child.c        (the main file for the child program)
 |
 +-- clock.c        (the main file for the clock library)
 |
 +-- clock.h        (the corresponding header file for clock.c)
 |
 +-- Makefile
 |
 +-- oss.c          (the main file for the oss program)
 |
 +-- resmgr.c       (the main file for the resource manager module library)
 |
 +-- resmgr.h       (the corresponding header file for resmgr.c)
 |
 +-- README

Building
========

To build, run the following command:

$ make

Usage
=====

At any time, run the following command for help:

$ ./oss -h

The program will run with the assigned defaults if you run the following:

$ ./oss

To run in verbose mode to see what is happening internally, use -v:

$ ./oss -v

Interrupt the process with ^C on a terminal to stop the simulation.

Cleanup
=======

To clean up after a build, use the following command:

$ make clean
